// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Openlatino.Admin.Infrastucture.DataContexts;

namespace OpenLatino.Admin.Infrastructure.Migrations
{
    [DbContext(typeof(AdminDb))]
    [Migration("20200305141057_RelationUserWorkspace")]
    partial class RelationUserWorkspace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.AlfaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Columns")
                        .IsRequired();

                    b.Property<string>("ConnectionString")
                        .IsRequired();

                    b.Property<int>("LayerId")
                        .HasColumnName("LayerID");

                    b.Property<string>("PkField")
                        .IsRequired();

                    b.Property<string>("Table")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LayerId")
                        .HasName("IX_LayerID");

                    b.ToTable("AlfaInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Columns = "type,oneway,bridge,maxspeed,name,ref",
                            ConnectionString = "Data Source=localhost;Initial Catalog=SpatialDemo;Integrated Security=True",
                            LayerId = 3,
                            PkField = "osm_id",
                            Table = "roads"
                        },
                        new
                        {
                            Id = 2,
                            Columns = "name,type",
                            ConnectionString = "Data Source=localhost;Initial Catalog=SpatialDemo;Integrated Security=True",
                            LayerId = 1,
                            PkField = "osm_id",
                            Table = "buildings"
                        },
                        new
                        {
                            Id = 3,
                            Columns = "timestamp,name,type",
                            ConnectionString = "Data Source=localhost;Initial Catalog=SpatialDemo;Integrated Security=True",
                            LayerId = 2,
                            PkField = "osm_id",
                            Table = "points"
                        },
                        new
                        {
                            Id = 4,
                            Columns = "name,type",
                            ConnectionString = "Data Source=localhost;Initial Catalog=SpatialDemo;Integrated Security=True",
                            LayerId = 4,
                            PkField = "osm_id",
                            Table = "buildings"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessKey");

                    b.Property<bool>("Active");

                    b.Property<string>("AllowedOrigin")
                        .HasMaxLength(100);

                    b.Property<int>("ApplicationType");

                    b.Property<string>("ApplicationUserId");

                    b.Property<long>("ExpirationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password");

                    b.Property<string>("UpdateKey");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Active = false,
                            ApplicationType = 0,
                            ExpirationDate = 0L,
                            Name = "fmujica"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ClientWorkSpaces", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnName("Client_Id");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnName("WorkSpace_Id");

                    b.HasKey("ClientId", "WorkSpaceId")
                        .HasName("PK_dbo.ClientWorkSpaces");

                    b.HasIndex("ClientId")
                        .HasName("IX_Client_Id");

                    b.HasIndex("WorkSpaceId")
                        .HasName("IX_WorkSpace_Id");

                    b.ToTable("ClientWorkSpaces");

                    b.HasData(
                        new
                        {
                            ClientId = "1",
                            WorkSpaceId = 1
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Function")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Filters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Function = new byte[] { 0, 1, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 12, 2, 0, 0, 0, 82, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 44, 32, 86, 101, 114, 115, 105, 111, 110, 61, 49, 46, 48, 46, 48, 46, 48, 44, 32, 67, 117, 108, 116, 117, 114, 101, 61, 110, 101, 117, 116, 114, 97, 108, 44, 32, 80, 117, 98, 108, 105, 99, 75, 101, 121, 84, 111, 107, 101, 110, 61, 110, 117, 108, 108, 5, 1, 0, 0, 0, 54, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 71, 101, 111, 109, 101, 116, 114, 121, 70, 105, 108, 116, 101, 114, 3, 0, 0, 0, 11, 95, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 11, 95, 99, 108, 97, 117, 115, 101, 73, 110, 102, 111, 8, 95, 98, 111, 111, 108, 101, 97, 110, 4, 4, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 70, 105, 108, 116, 101, 114, 2, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 2, 0, 0, 0, 1, 2, 0, 0, 0, 10, 10, 1, 11 },
                            Name = "default"
                        },
                        new
                        {
                            Id = 2,
                            Function = new byte[] { 0, 1, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 12, 2, 0, 0, 0, 82, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 44, 32, 86, 101, 114, 115, 105, 111, 110, 61, 49, 46, 48, 46, 48, 46, 48, 44, 32, 67, 117, 108, 116, 117, 114, 101, 61, 110, 101, 117, 116, 114, 97, 108, 44, 32, 80, 117, 98, 108, 105, 99, 75, 101, 121, 84, 111, 107, 101, 110, 61, 110, 117, 108, 108, 5, 1, 0, 0, 0, 54, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 71, 101, 111, 109, 101, 116, 114, 121, 70, 105, 108, 116, 101, 114, 3, 0, 0, 0, 11, 95, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 11, 95, 99, 108, 97, 117, 115, 101, 73, 110, 102, 111, 8, 95, 98, 111, 111, 108, 101, 97, 110, 4, 4, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 70, 105, 108, 116, 101, 114, 2, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 2, 0, 0, 0, 1, 2, 0, 0, 0, 10, 9, 3, 0, 0, 0, 0, 5, 3, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 4, 0, 0, 0, 23, 60, 83, 111, 117, 114, 99, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 21, 60, 78, 97, 109, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 25, 60, 79, 112, 101, 114, 97, 116, 111, 114, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 22, 60, 86, 97, 108, 117, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 4, 1, 4, 2, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 2, 0, 0, 0, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 2, 0, 0, 0, 2, 0, 0, 0, 5, 252, 255, 255, 255, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 4, 116, 121, 112, 101, 5, 250, 255, 255, 255, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 6, 0, 0, 0, 6, 7, 0, 0, 0, 6, 115, 99, 104, 111, 111, 108, 11 },
                            Name = "school"
                        },
                        new
                        {
                            Id = 3,
                            Function = new byte[] { 0, 1, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 12, 2, 0, 0, 0, 82, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 44, 32, 86, 101, 114, 115, 105, 111, 110, 61, 49, 46, 48, 46, 48, 46, 48, 44, 32, 67, 117, 108, 116, 117, 114, 101, 61, 110, 101, 117, 116, 114, 97, 108, 44, 32, 80, 117, 98, 108, 105, 99, 75, 101, 121, 84, 111, 107, 101, 110, 61, 110, 117, 108, 108, 5, 1, 0, 0, 0, 54, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 71, 101, 111, 109, 101, 116, 114, 121, 70, 105, 108, 116, 101, 114, 3, 0, 0, 0, 11, 95, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 11, 95, 99, 108, 97, 117, 115, 101, 73, 110, 102, 111, 8, 95, 98, 111, 111, 108, 101, 97, 110, 4, 4, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 70, 105, 108, 116, 101, 114, 2, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 2, 0, 0, 0, 1, 2, 0, 0, 0, 10, 9, 3, 0, 0, 0, 0, 5, 3, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 4, 0, 0, 0, 23, 60, 83, 111, 117, 114, 99, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 21, 60, 78, 97, 109, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 25, 60, 79, 112, 101, 114, 97, 116, 111, 114, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 22, 60, 86, 97, 108, 117, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 4, 1, 4, 2, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 2, 0, 0, 0, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 2, 0, 0, 0, 2, 0, 0, 0, 5, 252, 255, 255, 255, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 4, 116, 121, 112, 101, 5, 250, 255, 255, 255, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 6, 0, 0, 0, 6, 7, 0, 0, 0, 8, 104, 111, 115, 112, 105, 116, 97, 108, 11 },
                            Name = "hospital"
                        },
                        new
                        {
                            Id = 4,
                            Function = new byte[] { 0, 1, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 12, 2, 0, 0, 0, 82, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 44, 32, 86, 101, 114, 115, 105, 111, 110, 61, 49, 46, 48, 46, 48, 46, 48, 44, 32, 67, 117, 108, 116, 117, 114, 101, 61, 110, 101, 117, 116, 114, 97, 108, 44, 32, 80, 117, 98, 108, 105, 99, 75, 101, 121, 84, 111, 107, 101, 110, 61, 110, 117, 108, 108, 5, 1, 0, 0, 0, 54, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 71, 101, 111, 109, 101, 116, 114, 121, 70, 105, 108, 116, 101, 114, 3, 0, 0, 0, 11, 95, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 11, 95, 99, 108, 97, 117, 115, 101, 73, 110, 102, 111, 8, 95, 98, 111, 111, 108, 101, 97, 110, 4, 4, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 70, 105, 108, 116, 101, 114, 2, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 2, 0, 0, 0, 1, 2, 0, 0, 0, 10, 9, 3, 0, 0, 0, 0, 5, 3, 0, 0, 0, 46, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 67, 108, 97, 117, 115, 101, 4, 0, 0, 0, 23, 60, 83, 111, 117, 114, 99, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 21, 60, 78, 97, 109, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 25, 60, 79, 112, 101, 114, 97, 116, 111, 114, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 22, 60, 86, 97, 108, 117, 101, 62, 107, 95, 95, 66, 97, 99, 107, 105, 110, 103, 70, 105, 101, 108, 100, 4, 1, 4, 2, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 2, 0, 0, 0, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 2, 0, 0, 0, 2, 0, 0, 0, 5, 252, 255, 255, 255, 56, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 73, 110, 102, 111, 83, 111, 117, 114, 99, 101, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 4, 116, 121, 112, 101, 5, 250, 255, 255, 255, 64, 79, 112, 101, 110, 76, 97, 116, 105, 110, 111, 46, 77, 97, 112, 83, 101, 114, 118, 101, 114, 46, 68, 111, 109, 97, 105, 110, 46, 77, 97, 112, 46, 70, 105, 108, 116, 101, 114, 115, 46, 69, 110, 117, 109, 115, 46, 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 79, 112, 101, 114, 97, 116, 111, 114, 1, 0, 0, 0, 7, 118, 97, 108, 117, 101, 95, 95, 0, 8, 2, 0, 0, 0, 6, 0, 0, 0, 6, 7, 0, 0, 0, 10, 117, 110, 105, 118, 101, 114, 115, 105, 116, 121, 11 },
                            Name = "university"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order");

                    b.Property<int>("ProviderInfoId");

                    b.HasKey("Id");

                    b.HasIndex("ProviderInfoId")
                        .HasName("IX_ProviderInfoId");

                    b.ToTable("Layers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Order = 0,
                            ProviderInfoId = 1
                        },
                        new
                        {
                            Id = 1,
                            Order = 3,
                            ProviderInfoId = 3
                        },
                        new
                        {
                            Id = 3,
                            Order = 2,
                            ProviderInfoId = 2
                        },
                        new
                        {
                            Id = 4,
                            Order = 4,
                            ProviderInfoId = 3
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.LayerStyle", b =>
                {
                    b.Property<int>("LayerId");

                    b.Property<int>("VectorStyleId");

                    b.HasKey("LayerId", "VectorStyleId")
                        .HasName("PK_dbo.LayerStyles");

                    b.HasIndex("VectorStyleId");

                    b.ToTable("LayerStyles");

                    b.HasData(
                        new
                        {
                            LayerId = 1,
                            VectorStyleId = 1
                        },
                        new
                        {
                            LayerId = 2,
                            VectorStyleId = 2
                        },
                        new
                        {
                            LayerId = 3,
                            VectorStyleId = 3
                        },
                        new
                        {
                            LayerId = 4,
                            VectorStyleId = 7
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.LayerWorkspaces", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnName("Layer_Id");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnName("WorkSpace_Id");

                    b.Property<int?>("VectorStyleId");

                    b.HasKey("LayerId", "WorkSpaceId")
                        .HasName("PK_dbo.LayerWorkSpaces");

                    b.HasIndex("LayerId")
                        .HasName("IX_Layer_Id");

                    b.HasIndex("VectorStyleId");

                    b.HasIndex("WorkSpaceId")
                        .HasName("IX_WorkSpace_Id");

                    b.ToTable("LayerWorkspaces");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ProviderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoundingBoxField")
                        .IsRequired();

                    b.Property<string>("ConnectionString")
                        .IsRequired();

                    b.Property<string>("GeoField")
                        .IsRequired();

                    b.Property<string>("PkField")
                        .IsRequired();

                    b.Property<string>("Table")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoundingBoxField = "BBOX_latino",
                            ConnectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\\GeoCuba.mdf;Integrated Security=True",
                            GeoField = "ogr_geometry",
                            PkField = "osm_id",
                            Table = "points",
                            Type = "OpenLatino.MapServer.Infrastucture.SQL.DataSource.ProviderSQL, OpenLatino.MapServer.Infrastructure.SQL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                        },
                        new
                        {
                            Id = 2,
                            BoundingBoxField = "BBOX_latino1",
                            ConnectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\\GeoCuba.mdf;Integrated Security=True",
                            GeoField = "ogr_geometry",
                            PkField = "osm_id",
                            Table = "roads",
                            Type = "OpenLatino.MapServer.Infrastucture.SQL.DataSource.ProviderSQL, OpenLatino.MapServer.Infrastructure.SQL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                        },
                        new
                        {
                            Id = 3,
                            BoundingBoxField = "BBOX_latino1",
                            ConnectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\\GeoCuba.mdf;Integrated Security=True",
                            GeoField = "ogr_geometry",
                            PkField = "osm_id",
                            Table = "buildings",
                            Type = "OpenLatino.MapServer.Infrastucture.SQL.DataSource.ProviderSQL, OpenLatino.MapServer.Infrastructure.SQL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WMS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SOP"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ServiceFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .HasName("IX_ServiceId");

                    b.ToTable("ServiceFunctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GetMap",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetFeatureInfo",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetCapabilities",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "GetGraphicLegend",
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.StyleConfig", b =>
                {
                    b.Property<int>("LayerId");

                    b.Property<int>("FilterId");

                    b.Property<int>("StyleId");

                    b.HasKey("LayerId", "FilterId")
                        .HasName("PK_dbo.StyleConfiguration");

                    b.HasIndex("FilterId")
                        .HasName("IX_FilterId");

                    b.HasIndex("LayerId")
                        .HasName("IX_LayerId");

                    b.HasIndex("StyleId")
                        .HasName("IX_StyleId");

                    b.ToTable("StyleConfiguration");

                    b.HasData(
                        new
                        {
                            LayerId = 4,
                            FilterId = 2,
                            StyleId = 4
                        },
                        new
                        {
                            LayerId = 4,
                            FilterId = 3,
                            StyleId = 5
                        },
                        new
                        {
                            LayerId = 4,
                            FilterId = 4,
                            StyleId = 6
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.VectorStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnableOutline");

                    b.Property<string>("Fill")
                        .IsRequired();

                    b.Property<byte[]>("ImageContent");

                    b.Property<float>("ImageRotation");

                    b.Property<float>("ImageScale");

                    b.Property<string>("Line")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OutlinePen")
                        .IsRequired();

                    b.Property<string>("PointFill")
                        .IsRequired();

                    b.Property<float>("PointSize");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnableOutline = true,
                            Fill = "LightYellow",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "Red",
                            Name = "buildings_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 3,
                            EnableOutline = false,
                            Fill = "Crimson",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "Black",
                            Name = "roads_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 2,
                            EnableOutline = false,
                            Fill = "Crimson",
                            ImageContent = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 64, 0, 0, 0, 64, 8, 6, 0, 0, 0, 170, 105, 113, 222, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 4, 203, 73, 68, 65, 84, 120, 94, 237, 155, 89, 168, 117, 99, 24, 199, 143, 121, 206, 135, 72, 185, 146, 76, 87, 124, 74, 134, 50, 196, 13, 69, 148, 136, 16, 185, 244, 69, 41, 113, 161, 36, 153, 135, 11, 69, 92, 152, 135, 12, 9, 37, 67, 82, 40, 119, 46, 228, 70, 68, 72, 50, 20, 81, 198, 204, 191, 95, 173, 127, 61, 173, 246, 249, 28, 231, 59, 235, 221, 251, 172, 214, 191, 126, 173, 189, 215, 122, 247, 122, 159, 231, 121, 159, 119, 216, 235, 221, 123, 105, 64, 109, 221, 17, 109, 128, 227, 225, 106, 120, 0, 94, 132, 55, 58, 124, 125, 63, 92, 5, 199, 193, 238, 16, 245, 239, 179, 46, 180, 77, 119, 84, 71, 193, 61, 240, 49, 252, 179, 66, 62, 130, 187, 225, 72, 136, 234, 61, 23, 86, 91, 117, 168, 141, 240, 2, 244, 157, 251, 11, 254, 236, 240, 117, 255, 125, 45, 251, 55, 60, 7, 135, 129, 170, 247, 95, 56, 213, 52, 189, 6, 126, 133, 56, 210, 119, 78, 199, 42, 57, 31, 18, 148, 188, 255, 5, 236, 58, 209, 194, 117, 137, 24, 180, 43, 60, 15, 49, 252, 143, 242, 90, 71, 117, 170, 158, 171, 215, 250, 231, 114, 190, 150, 127, 22, 118, 1, 181, 48, 65, 136, 33, 123, 194, 219, 160, 161, 26, 93, 157, 170, 173, 25, 126, 134, 239, 224, 247, 114, 110, 57, 106, 32, 222, 130, 61, 64, 205, 61, 8, 246, 71, 141, 216, 25, 28, 205, 53, 112, 86, 171, 231, 253, 155, 112, 37, 156, 12, 251, 131, 173, 121, 40, 124, 1, 41, 159, 178, 179, 72, 176, 94, 135, 29, 193, 186, 231, 58, 38, 100, 100, 126, 24, 170, 129, 82, 157, 121, 25, 156, 2, 103, 105, 31, 248, 12, 44, 215, 31, 4, 103, 145, 58, 156, 54, 213, 220, 102, 135, 84, 124, 49, 84, 195, 36, 142, 120, 238, 50, 136, 182, 133, 211, 224, 46, 48, 149, 223, 135, 239, 33, 159, 91, 41, 201, 178, 11, 64, 53, 15, 66, 82, 111, 95, 248, 26, 116, 56, 78, 219, 242, 242, 19, 156, 10, 145, 142, 191, 3, 213, 145, 240, 95, 169, 223, 199, 186, 252, 204, 151, 96, 6, 53, 159, 30, 19, 241, 91, 64, 131, 210, 207, 53, 42, 35, 253, 233, 16, 93, 7, 213, 120, 175, 91, 46, 142, 228, 218, 255, 33, 117, 222, 0, 202, 236, 106, 162, 68, 122, 47, 248, 22, 116, 32, 173, 31, 163, 174, 133, 232, 118, 200, 181, 92, 95, 11, 18, 188, 111, 192, 25, 72, 53, 201, 130, 68, 58, 125, 63, 206, 199, 160, 247, 96, 123, 80, 41, 99, 139, 175, 182, 165, 55, 71, 2, 154, 177, 160, 73, 22, 100, 238, 117, 81, 162, 83, 49, 34, 129, 184, 8, 212, 126, 96, 134, 120, 62, 215, 214, 154, 4, 246, 41, 80, 131, 175, 11, 146, 98, 206, 193, 117, 234, 74, 235, 154, 142, 118, 13, 101, 55, 136, 145, 49, 120, 173, 73, 189, 159, 64, 178, 110, 80, 37, 194, 135, 192, 111, 16, 35, 226, 164, 203, 96, 101, 42, 190, 11, 53, 67, 134, 32, 1, 240, 123, 199, 129, 160, 6, 205, 130, 140, 254, 174, 228, 170, 1, 9, 192, 77, 160, 14, 130, 31, 161, 150, 25, 138, 220, 255, 68, 80, 131, 174, 9, 114, 243, 51, 193, 74, 211, 186, 57, 94, 10, 150, 57, 182, 123, 63, 180, 243, 146, 186, 51, 237, 14, 58, 16, 230, 230, 231, 128, 149, 166, 229, 99, 196, 38, 80, 167, 64, 61, 63, 36, 177, 225, 44, 80, 77, 2, 208, 207, 128, 180, 244, 167, 224, 224, 103, 255, 247, 253, 80, 163, 127, 165, 159, 1, 77, 186, 192, 73, 96, 165, 58, 222, 34, 205, 151, 163, 214, 127, 2, 168, 65, 3, 144, 17, 246, 96, 200, 19, 159, 26, 0, 95, 155, 146, 45, 90, 94, 82, 183, 79, 140, 14, 0, 53, 232, 44, 144, 117, 192, 14, 96, 186, 91, 121, 43, 103, 103, 145, 186, 125, 224, 154, 117, 192, 224, 203, 225, 68, 248, 105, 72, 139, 247, 13, 107, 133, 117, 107, 195, 227, 160, 6, 77, 255, 40, 3, 225, 133, 160, 17, 139, 144, 1, 231, 130, 106, 18, 128, 164, 152, 207, 229, 92, 250, 218, 2, 233, 139, 45, 209, 121, 235, 253, 10, 178, 145, 210, 228, 219, 160, 74, 164, 175, 7, 141, 105, 49, 223, 247, 73, 215, 203, 87, 239, 38, 173, 31, 25, 105, 217, 27, 124, 160, 105, 75, 180, 236, 10, 105, 253, 207, 193, 47, 95, 142, 75, 205, 90, 63, 74, 196, 207, 3, 141, 106, 53, 24, 234, 120, 234, 58, 27, 84, 211, 214, 175, 74, 197, 247, 129, 6, 213, 7, 163, 67, 145, 58, 220, 111, 84, 115, 115, 94, 153, 118, 166, 159, 115, 240, 171, 80, 13, 28, 130, 220, 251, 37, 216, 14, 230, 146, 250, 125, 197, 128, 221, 224, 53, 208, 192, 204, 207, 213, 248, 45, 161, 166, 253, 43, 144, 237, 177, 185, 59, 31, 101, 113, 180, 19, 184, 40, 137, 225, 91, 58, 59, 84, 199, 229, 17, 240, 105, 148, 90, 24, 231, 163, 106, 208, 229, 240, 3, 196, 112, 157, 200, 200, 157, 115, 203, 97, 25, 203, 86, 199, 221, 60, 201, 87, 109, 181, 112, 206, 71, 26, 150, 108, 240, 177, 217, 147, 208, 207, 2, 223, 7, 157, 148, 122, 174, 95, 246, 9, 240, 203, 151, 90, 136, 62, 191, 18, 213, 145, 249, 8, 184, 19, 62, 132, 234, 220, 230, 248, 0, 238, 0, 127, 100, 17, 205, 117, 180, 95, 141, 108, 173, 100, 131, 114, 166, 240, 39, 47, 151, 192, 109, 240, 24, 248, 16, 213, 95, 128, 248, 250, 86, 240, 154, 101, 234, 19, 222, 254, 125, 214, 157, 52, 126, 53, 173, 231, 103, 214, 181, 227, 85, 58, 98, 223, 245, 185, 157, 107, 247, 51, 224, 24, 56, 188, 227, 104, 112, 243, 212, 159, 214, 184, 155, 84, 199, 146, 81, 40, 25, 224, 182, 248, 172, 62, 95, 121, 6, 212, 160, 15, 55, 91, 43, 1, 184, 17, 28, 217, 93, 209, 57, 221, 101, 90, 244, 232, 57, 175, 229, 135, 15, 163, 12, 192, 205, 160, 195, 253, 233, 174, 158, 123, 8, 212, 20, 128, 238, 56, 10, 77, 1, 232, 142, 83, 0, 160, 58, 91, 153, 2, 208, 29, 167, 0, 128, 154, 2, 208, 29, 71, 161, 41, 0, 221, 113, 10, 0, 84, 103, 43, 83, 0, 186, 227, 20, 0, 80, 83, 0, 186, 227, 40, 52, 5, 160, 59, 78, 1, 128, 234, 108, 101, 10, 64, 119, 156, 2, 0, 106, 148, 1, 240, 183, 196, 213, 217, 74, 206, 61, 8, 106, 148, 1, 112, 67, 196, 125, 191, 229, 2, 224, 181, 71, 65, 141, 50, 0, 231, 131, 206, 206, 218, 36, 213, 121, 143, 87, 128, 202, 103, 70, 35, 55, 59, 108, 213, 123, 193, 255, 26, 196, 97, 49, 32, 110, 146, 186, 17, 234, 159, 48, 45, 219, 96, 19, 116, 105, 233, 95, 57, 210, 207, 187, 159, 84, 146, 147, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 },
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "Red",
                            Name = "points_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 4,
                            EnableOutline = true,
                            Fill = "LawnGreen",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "DarkOliveGreen",
                            Name = "school_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 5,
                            EnableOutline = true,
                            Fill = "DarkMagenta",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "CornflowerBlue",
                            Name = "hospital_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 6,
                            EnableOutline = true,
                            Fill = "DarkRed",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "DarkBlue",
                            Name = "university_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        },
                        new
                        {
                            Id = 7,
                            EnableOutline = true,
                            Fill = "Tomato",
                            ImageRotation = 0f,
                            ImageScale = 0f,
                            Line = "Red",
                            Name = "buildingThematic_style",
                            OutlinePen = "Black",
                            PointFill = "Brown",
                            PointSize = 0f
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.WorkSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("Default");

                    b.Property<string>("ForAppType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("WorkSpaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Default = false,
                            Name = "common"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.AlfaInfoTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("EntityId")
                        .HasColumnName("EntityID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("LanguageId", "EntityId")
                        .HasName("PK_dbo.AlfaInfoTranslations");

                    b.HasIndex("EntityId")
                        .HasName("IX_EntityID");

                    b.HasIndex("LanguageId")
                        .HasName("IX_LanguageID");

                    b.ToTable("AlfaInfoTranslations");

                    b.HasData(
                        new
                        {
                            LanguageId = 1033,
                            EntityId = 1,
                            Description = "contain roads names, max speed and other infos",
                            Name = "Roads Info"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 2,
                            Description = "La informaci�n que contiene de las edificaciones es: tipo de edificaci�n (oficina, hotel, ...) y nombre",
                            Name = "Informaci�n de las construcciones"
                        },
                        new
                        {
                            LanguageId = 1033,
                            EntityId = 3,
                            Description = "timestamp, name and type of points",
                            Name = "points info"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 4,
                            Description = "La informaci�n que contiene de las edificaciones es: tipo de edificaci�n (oficina, hotel, ...) y nombre",
                            Name = "Informaci�n de las construcciones"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.Language", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("ID");

                    b.Property<bool>("Default");

                    b.Property<string>("LanguageName");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            ID = 3082,
                            Default = true,
                            LanguageName = "Espa�ol"
                        },
                        new
                        {
                            ID = 1033,
                            Default = false,
                            LanguageName = "English"
                        },
                        new
                        {
                            ID = 1031,
                            Default = false,
                            LanguageName = "Alem�n"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.LayerTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("EntityId")
                        .HasColumnName("EntityID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("LanguageId", "EntityId")
                        .HasName("PK_dbo.LayerTranslations");

                    b.HasIndex("EntityId")
                        .HasName("IX_EntityID");

                    b.HasIndex("LanguageId")
                        .HasName("IX_LanguageID");

                    b.ToTable("LayerTranslations");

                    b.HasData(
                        new
                        {
                            LanguageId = 1033,
                            EntityId = 3,
                            Description = "All hotels",
                            Name = "Hotel layer"
                        },
                        new
                        {
                            LanguageId = 1033,
                            EntityId = 2,
                            Description = "This lay contains all buildings",
                            Name = "Buildings"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 2,
                            Description = "En esta capa est�n representados todos los edificios, casas e industrias.",
                            Name = "Edificios"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 1,
                            Description = "Esta capa representa a todas las capas de la ciudad",
                            Name = "calles"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 4,
                            Description = "Esta capa representa a todas las capas de la ciudad",
                            Name = "Building Thematic"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.ProviderTranslations", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("LanguageID");

                    b.Property<int>("EntityId")
                        .HasColumnName("EntityID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("LanguageId", "EntityId")
                        .HasName("PK_dbo.ProviderTranslations");

                    b.HasIndex("EntityId")
                        .HasName("IX_EntityID");

                    b.HasIndex("LanguageId")
                        .HasName("IX_LanguageID");

                    b.ToTable("ProviderTranslations");

                    b.HasData(
                        new
                        {
                            LanguageId = 1033,
                            EntityId = 1,
                            Description = "Latino's description",
                            Name = "Latino name"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 1,
                            Description = "Descripci�n de latino",
                            Name = "Latino DB"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 2,
                            Description = "Descripci�n de latino1",
                            Name = "Latino1 DB"
                        },
                        new
                        {
                            LanguageId = 3082,
                            EntityId = 3,
                            Description = "Descripci�n de latino2",
                            Name = "Latino2 DB"
                        });
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.AlfaInfo", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Layer", "Layer")
                        .WithMany("AlfaInfoes")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("FK_dbo.AlfaInfoes_dbo.Layers_LayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Client", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.ApplicationUser", "User")
                        .WithMany("RegisterApps")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ClientWorkSpaces", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Client", "Client")
                        .WithMany("ClientWorkSpaces")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_dbo.ClientWorkSpaces_dbo.Client_Client_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Entities.WorkSpace", "WorkSpace")
                        .WithMany("CLientWorkSpaces")
                        .HasForeignKey("WorkSpaceId")
                        .HasConstraintName("FK_dbo.ClientWorkSpaces_dbo.WorkSpaces_WorkSpace_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.Layer", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.ProviderInfo", "ProviderInfo")
                        .WithMany("Layers")
                        .HasForeignKey("ProviderInfoId")
                        .HasConstraintName("FK_dbo.Layers_dbo.ProviderInfoes_ProviderInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.LayerStyle", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Layer", "Layer")
                        .WithMany("VectorStyles")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Entities.VectorStyle", "VectorStyle")
                        .WithMany("Layers")
                        .HasForeignKey("VectorStyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.LayerWorkspaces", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Layer", "Layer")
                        .WithMany("LayerWorkspaces")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("FK_dbo.LayerWorkSpaces_dbo.Layer_Layer_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Entities.VectorStyle", "Style")
                        .WithMany("LayerWorkspaces")
                        .HasForeignKey("VectorStyleId");

                    b.HasOne("OpenLatino.Core.Domain.Entities.WorkSpace", "Workspace")
                        .WithMany("LayerWorkspaces")
                        .HasForeignKey("WorkSpaceId")
                        .HasConstraintName("FK_dbo.LayerWorkSpaces_dbo.WorkSpaces_WorkSpace_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.ServiceFunction", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Service", "Service")
                        .WithMany("ServiceFunctions")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_dbo.ServiceFunctions_dbo.Services_ServiceId");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.StyleConfig", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Filter", "Filter")
                        .WithMany("StyleConfiguration")
                        .HasForeignKey("FilterId")
                        .HasConstraintName("FK_dbo.StyleConfiguration_dbo.Filters_FilterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Entities.Layer", "Layer")
                        .WithMany("StyleConfiguration")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("FK_dbo.StyleConfiguration_dbo.Layers_LayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Entities.VectorStyle", "Style")
                        .WithMany("StyleConfiguration")
                        .HasForeignKey("StyleId")
                        .HasConstraintName("FK_dbo.StyleConfiguration_dbo.VectorStyles_StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Entities.WorkSpace", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.ApplicationUser", "User")
                        .WithMany("CreatedWorkSpaces")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.AlfaInfoTranslation", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.AlfaInfo", "Entity")
                        .WithMany("AlfaInfoTranslations")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_dbo.AlfaInfoTranslations_dbo.AlfaInfoes_EntityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Internationalization.Language", "Language")
                        .WithMany("AlfaInfoTranslations")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.AlfaInfoTranslations_dbo.Languages_LanguageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.LayerTranslation", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.Layer", "Entity")
                        .WithMany("LayerTranslations")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_dbo.LayerTranslations_dbo.Layers_EntityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Internationalization.Language", "Language")
                        .WithMany("LayerTranslations")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.LayerTranslations_dbo.Languages_LanguageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenLatino.Core.Domain.Internationalization.ProviderTranslations", b =>
                {
                    b.HasOne("OpenLatino.Core.Domain.Entities.ProviderInfo", "Entity")
                        .WithMany("ProviderTranslations")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_dbo.ProviderTranslations_dbo.ProviderInfoes_EntityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenLatino.Core.Domain.Internationalization.Language", "Language")
                        .WithMany("ProviderTranslations")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.ProviderTranslations_dbo.Languages_LanguageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
